<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>PDF ‚Üí ProPresenter 6 (.pro6x)</title>
  <style>
    body {
      margin: 0;
      font-family: system-ui, sans-serif;
      background: #121212;
      color: #f0f0f0;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      padding-top: 40px;
    }
    h1 { margin-bottom: 10px; }
    p.subline { color: #aaa; font-size: .95em; margin-bottom: 30px; }

    /* Settings icon */
    .settings-toggle {
      position: fixed; top: 10px; right: 10px;
      background: none; border: none; color: #ccc;
      font-size: 1.5em; cursor: pointer; z-index: 1000;
    }
    .settings-toggle:hover { color: #fff; }

    /* Settings panel */
    .settings {
      display: none;
      position: fixed; top: 50px; right: 10px;
      background: #1e1e1e; border: 2px solid #444;
      border-radius: 10px; padding: 20px;
      max-width: 300px; color: #ccc;
      font-size: .9em; z-index: 999;
      flex-direction: column;
      gap: 10px;
    }
    .settings.active { display: flex; }
    .settings label { display: flex; align-items: center; gap: 5px; }
    .settings input[type=number] {
      width: 60px; padding:4px;
      background:#2a2a2a; border:1px solid #444;
      border-radius:4px; color:#f0f0f0;
    }
    .settings input[type=checkbox] { width:16px; height:16px; }
    .settings button {
      padding:6px 10px; background:#444;
      color:#eee; border:none; border-radius:4px; cursor:pointer;
    }
    .settings button:hover { background:#555; }

    /* History settings hidden until Debug */
    #history-settings { display: none; flex-direction: column; gap: 10px; }

    /* Upload box */
    .upload-box {
      transition: transform .2s, box-shadow .2s;
      background: #1e1e1e; border: 2px dashed #444;
      border-radius: 10px; padding: 40px;
      width: 100%; max-width: 600px;
      text-align: center; cursor: pointer;
    }
    .upload-box.dragover {
      transform: scale(1.02);
      box-shadow: 0 0 20px rgba(76,175,80,.4);
      border-color: #4caf50;
      background: #2a2a2a;
    }
    .upload-box input { display: none; }

    /* Progress styling */
    .progress-container {
      width:100%; max-width:600px;
      display:none; flex-direction:column;
      gap:20px; margin-top:30px;
    }
    .progress-item { display:flex; flex-direction:column; gap:8px; }
    .progress-label { font-size:.85em; color:#ccc; }
    .progress-status {
      font-size:.8em; color:#999;
      display:flex; align-items:center; gap:6px;
    }
    .progress-row {
      display:flex; align-items:center;
      justify-content:space-between; gap:10px;
    }
    .progress-bar {
      flex:1; height:10px; background:#333;
      border-radius:3px; overflow:hidden;
      margin-right:10px;
    }
    .progress-bar-fill {
      height:100%; width:0;
      transition: width .2s ease-in-out;
    }
    .progress-bar-fill.uploading {
      background: #4caf50;
    }
    /* Statische Processing-Farbe, kein Loop mehr */
    .progress-bar-fill.processing {
      background: #2196f3 !important;
      animation: none !important;
    }
    .progress-bar-fill.done {
      background: linear-gradient(270deg, #4caf50, #2196f3, #00bcd4, #4caf50);
      background-size: 600% 600%;
      animation: gradientShift 4s ease infinite;
    }
    @keyframes gradientShift {
      0% { background-position:0 50%; }
      50% { background-position:100% 50%; }
      100% { background-position:0 50%; }
    }

    /* Download icon */
    .download-icon {
      width:20px; height:20px;
      fill:#ccc; cursor:pointer;
      flex-shrink:0;
    }
    .download-icon:hover { fill:#fff; }

    /* Spinner */
    .spinner {
      display:inline-block;
      width:12px; height:12px;
      border:2px solid #999;
      border-top-color:transparent;
      border-radius:50%;
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Download All */
    #download-all {
      display:none; margin-top:10px;
      padding:8px 14px; background:#4caf50;
      color:#fff; border:none; border-radius:4px;
      cursor:pointer; font-size:.9em;
    }

    /* History list */
    .history-container {
      margin-top:40px; width:100%; max-width:600px;
      color:#888; font-size:.85em;
    }
    .history-container h3 {
      color:#ccc; display:flex;
      justify-content:space-between;
      align-items:center;
    }
    .history-container h3 button {
      padding:4px 8px; background:#444;
      color:#eee; border:none; border-radius:4px;
      cursor:pointer; font-size:.85em;
    }
    .history-container h3 button:hover { background:#555; }
    .history-container ul { list-style:none; padding:0; }
    .history-container li { padding:4px 0; border-bottom:1px solid #2a2a2a; }
    .history-container a { color:#4caf50; text-decoration:none; }
    .history-container a:hover { text-decoration:underline; }

    /* Footer */
    footer { margin-top:40px; color:#666; font-size:.8em; }
    a.footer-link { color:#aaa; text-decoration:none; }
    a.footer-link:hover { color:#fff; }

    /* Error-State */
    .progress-bar-fill.error {
      background: #f44336 !important;
      animation: none !important;
    }
    .error-btn {
      background: #f44336;
      color: #fff;
      border: none;
      border-radius: 4px;
      padding: 4px 8px;
      cursor: pointer;
      font-size: .8em;
      margin-left: 10px;
    }
    .error-btn:hover {
      background: #e53935;
    }
  </style>
</head>
<body>
  <button id="settings-toggle" class="settings-toggle">&#9881;</button>
  <h1>PDF ‚Üí ProPresenter 6</h1>
  <p class="subline">Lokal konvertiert ‚Äì ohne Tracking.</p>

  <div class="settings" id="settings-panel">
    <strong>Einstellungen</strong>
    <label><input type="checkbox" id="enable-debug"> Debug-Modus</label>
    <div id="history-settings">
      <strong>Verlaufs-Einstellungen</strong>
      <label><input type="checkbox" id="enable-history"> Verlauf aktivieren</label>
      <label>Max. Eintr√§ge: <input type="number" id="max-entries" value="5" min="0"></label>
      <label>Zeitraum (Tage): <input type="number" id="max-days" value="30" min="0"></label>
      <button id="clear-history">Verlauf l√∂schen</button>
    </div>
  </div>

  <div class="upload-box" id="drop-area">
    <input type="file" id="file-input" accept="application/pdf" multiple>
    <p><strong>Dateien hierher ziehen</strong><br>oder klicken zum Ausw√§hlen</p>
  </div>

  <div class="progress-container" id="progress-container"></div>
  <button id="download-all">Alle herunterladen</button>

  <div class="history-container" id="history-container">
    <h3>Verlauf <button id="clear-history-header">üóëÔ∏è</button></h3>
    <ul id="history-list"></ul>
  </div>

  <footer>¬© 2025 David L√∂wen ‚Äì <a class="footer-link" href="https://github.com/...">pdf2pro6x</a></footer>

  <script>
    // Cookie-Hilfsfunktionen
    function setCookie(name, val, days) {
      const d = new Date();
      d.setTime(d.getTime() + days * 864e5);
      document.cookie = \`\${name}=\${encodeURIComponent(val)};expires=\${d.toUTCString()};path=/\`;
    }
    function getCookie(name) {
      const m = document.cookie.split('; ').find(r => r.startsWith(name + '='));
      return m ? decodeURIComponent(m.split('=')[1]) : null;
    }
    function deleteCookie(name) {
      document.cookie = \`\${name}=;Max-Age=0;path=/\`;
    }

    // UI-Refs
    const settingsToggle   = document.getElementById('settings-toggle');
    const settingsPanel    = document.getElementById('settings-panel');
    const enableDebug      = document.getElementById('enable-debug');
    const historySettings  = document.getElementById('history-settings');
    const enableHistory    = document.getElementById('enable-history');
    const maxEntries       = document.getElementById('max-entries');
    const maxDays          = document.getElementById('max-days');
    const clearBtn         = document.getElementById('clear-history');
    const clearHeaderBtn   = document.getElementById('clear-history-header');
    const historyContainer = document.getElementById('history-container');
    const historyList      = document.getElementById('history-list');
    const dropArea         = document.getElementById('drop-area');
    const fileInput        = document.getElementById('file-input');
    const progressContainer= document.getElementById('progress-container');
    const downloadAllBtn   = document.getElementById('download-all');
    let completedDownloads = [];

    // Settings-Panel umschalten
    settingsToggle.addEventListener('click', () => {
      settingsPanel.classList.toggle('active');
    });

    // Einstellungen laden
    const opts = JSON.parse(getCookie('pdf2pro6x_opts') || '{}');
    enableDebug.checked   = opts.debug ?? false;
    historySettings.style.display = enableDebug.checked ? 'flex' : 'none';
    enableHistory.checked = opts.enabled ?? true;
    maxEntries.value      = opts.maxEntries ?? 5;
    maxDays.value         = opts.maxDays ?? 30;
    historyContainer.style.display = enableHistory.checked ? 'block' : 'none';

    // √Ñnderungen speichern & UI updaten
    [enableDebug, enableHistory, maxEntries, maxDays].forEach(el => {
      el.addEventListener('change', () => {
        setCookie('pdf2pro6x_opts', JSON.stringify({
          debug: enableDebug.checked,
          enabled: enableHistory.checked,
          maxEntries: +maxEntries.value,
          maxDays: +maxDays.value
        }), 365);
        historySettings.style.display  = enableDebug.checked ? 'flex' : 'none';
        historyContainer.style.display = enableHistory.checked ? 'block' : 'none';
      });
    });

    // History-Funktionen
    function loadHistory() {
      return JSON.parse(getCookie('pdf2pro6x_hist') || '[]');
    }
    function saveHistory(arr) {
      setCookie('pdf2pro6x_hist', JSON.stringify(arr), 365);
    }
    function clearHistory() {
      deleteCookie('pdf2pro6x_hist');
      renderHistory([]);
    }
    clearBtn.addEventListener('click', clearHistory);
    clearHeaderBtn.addEventListener('click', clearHistory);

    // Drag & Drop / Klick
    dropArea.addEventListener('click', () => fileInput.click());
    dropArea.addEventListener('dragover', e => {
      e.preventDefault(); dropArea.classList.add('dragover');
    });
    dropArea.addEventListener('dragleave', () => {
      dropArea.classList.remove('dragover');
    });
    dropArea.addEventListener('drop', e => {
      e.preventDefault(); dropArea.classList.remove('dragover');
      if (e.dataTransfer.files.length) handleFiles(e.dataTransfer.files);
    });
    fileInput.addEventListener('change', () => {
      if (fileInput.files.length) handleFiles(fileInput.files);
    });

    // Batch-Upload starten
    function handleFiles(files) {
      progressContainer.innerHTML = '';
      completedDownloads = [];
      downloadAllBtn.style.display = 'none';
      progressContainer.style.display = 'flex';
      Array.from(files).forEach(uploadFile);
    }

    // Einzelner Datei-Upload
    function uploadFile(file) {
      // UI-Elemente
      const item    = document.createElement('div'); item.className = 'progress-item';
      const label   = document.createElement('div'); label.className = 'progress-label'; label.innerText = file.name;
      const status  = document.createElement('div'); status.className = 'progress-status';
      const spinner = document.createElement('span'); spinner.className = 'spinner';
      const row     = document.createElement('div'); row.className = 'progress-row';
      const bar     = document.createElement('div'); bar.className = 'progress-bar';
      const fill    = document.createElement('div'); fill.className = 'progress-bar-fill uploading';
      const icon    = document.createElementNS('http://www.w3.org/2000/svg','svg');
      icon.setAttribute('viewBox','0 0 24 24'); icon.classList.add('download-icon');
      icon.innerHTML = '<path d="M12 16l4-5h-3V4h-2v7H8l4 5zM5 18h14v2H5z"/>'; icon.style.display = 'none';
      bar.append(fill);
      row.append(bar, icon);
      item.append(label, row, status);
      progressContainer.append(item);

      const xhr = new XMLHttpRequest();
      const form = new FormData(); form.append('file', file);
      xhr.open('POST', '/', true);
      xhr.responseType = 'blob';

      // Upload-Progress
      status.innerText = 'Upload '; status.append(spinner);
      xhr.upload.addEventListener('progress', e => {
        if (e.lengthComputable) fill.style.width = (e.loaded / e.total * 100) + '%';
      });
      xhr.upload.addEventListener('load', () => {
        fill.style.width = '100%';
        fill.classList.replace('uploading','processing');
        status.innerText = 'Konvertierung '; status.append(spinner);
      });

      // Fehler-Handler
      function handleError(msg) {
        fill.classList.remove('uploading','processing');
        fill.classList.add('error');
        status.innerText = 'Fehler';
        const btn = document.createElement('button');
        btn.className = 'error-btn';
        btn.innerText = 'Details';
        btn.addEventListener('click', () => alert('Fehler: ' + msg));
        status.append(btn);
      }

      // Antwort
      xhr.addEventListener('load', () => {
        spinner.remove();
        if (xhr.status >= 200 && xhr.status < 300) {
          fill.classList.replace('processing','done');
          status.innerText = 'Fertig';
          const blob = xhr.response;
          const link= document.createElement('a');
          link.href  = URL.createObjectURL(blob);
          link.download = file.name.replace(/\\.pdf$/, '.pro6x');
          icon.style.display = 'block';
          icon.addEventListener('click', () => link.click());
          completedDownloads.push(link);
          if (completedDownloads.length > 1) {
            downloadAllBtn.style.display = 'inline-block';
            downloadAllBtn.onclick = () => completedDownloads.forEach(a => a.click());
          }
          // Verlauf
          if (enableHistory.checked) {
            let hist = loadHistory();
            hist.unshift({ name: file.name, url: link.href, time: Date.now() });
            if (+maxDays.value > 0) {
              const cutoff = Date.now() - +maxDays.value * 864e5;
              hist = hist.filter(e => e.time >= cutoff);
            }
            if (+maxEntries.value > 0) hist = hist.slice(0, +maxEntries.value);
            saveHistory(hist);
            renderHistory(hist);
          }
        } else {
          handleError(xhr.statusText || ('Status ' + xhr.status));
        }
      });
      xhr.addEventListener('error', () => handleError(xhr.statusText || 'Netzwerkfehler'));
      xhr.send(form);
    }

    // Verlauf rendern
    function renderHistory(arr) {
      historyList.innerHTML = '';
      arr.forEach(e => {
        const li = document.createElement('li');
        const a  = document.createElement('a');
        a.href      = e.url;
        a.target    = '_blank';
        a.innerText = e.name;
        li.append(a);
        historyList.append(li);
      });
    }

    // Init
    document.addEventListener('DOMContentLoaded', () => {
      renderHistory(loadHistory());
    });
  </script>
</body>
</html>
